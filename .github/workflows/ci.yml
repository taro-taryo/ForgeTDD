name: CI - ForgeTDD

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    name: Build and Test on Self-Hosted Runner
    runs-on: self-hosted

    steps:
      # デバッグ用: 現在のパス情報とディレクトリ構造を確認
      - name: Debug Directory Structure
        run: |
          echo "Current working directory:"
          pwd
          echo "Contents of GITHUB_WORKSPACE:"
          ls -R $GITHUB_WORKSPACE

      # リポジトリをチェックアウト
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 正しいパスを設定
      - name: Adjust Working Directory
        run: |
          if [ -d "$GITHUB_WORKSPACE/ForgeTDD.xcodeproj" ]; then
            cd $GITHUB_WORKSPACE
          elif [ -d "$GITHUB_WORKSPACE/ForgeTDD/ForgeTDD.xcodeproj" ]; then
            cd $GITHUB_WORKSPACE/ForgeTDD
          elif [ -d "$GITHUB_WORKSPACE/actions-runner/_work/ForgeTDD/ForgeTDD/ForgeTDD.xcodeproj" ]; then
            cd $GITHUB_WORKSPACE/actions-runner/_work/ForgeTDD/ForgeTDD
          else
            echo "Error: ForgeTDD.xcodeproj not found in expected locations."
            exit 1
          fi
          echo "Adjusted working directory to:"
          pwd

      # 必要な依存関係をインストール
      - name: Install Dependencies
        run: |
          xcodebuild -version
          swift --version

      # ビルド
      - name: Build Project
        run: |
          xcodebuild \
            -project ForgeTDD.xcodeproj \
            -scheme ForgeTDD \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            build

      # 単体テスト
      - name: Run Unit Tests
        run: |
          xcodebuild \
            -project ForgeTDD.xcodeproj \
            -scheme ForgeTDD \
            -sdk macosx \
            -destination 'platform=macOS,arch=arm64' \
            test

      # テスト結果を保存
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            ~/Library/Developer/Xcode/DerivedData/**/*.xcresult

      # コード解析（SwiftLint の例）
      - name: Run SwiftLint
        run: |
          brew install swiftlint || true
          swiftlint --strict

      # 成功通知
      - name: Notify Success
        if: success()
        run: echo "✅ Build and Tests passed successfully!"
